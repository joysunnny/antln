package com.analyzer.analyzers;

import com.analyzer.model.*;
import spoon.Launcher;
import spoon.reflect.CtModel;
import spoon.reflect.code.*;
import spoon.reflect.declaration.*;
import spoon.reflect.visitor.filter.TypeFilter;

import java.io.File;
import java.util.*;

public class MethodAnalyzer {
    public List<MethodModel> analyze(File projectDir) {
        List<MethodModel> methodModels = new ArrayList<>();
        Launcher launcher = new Launcher();
        launcher.addInputResource(projectDir.getAbsolutePath());
        launcher.buildModel();
        CtModel model = launcher.getModel();

        for (CtClass<?> ctClass : model.getElements(new TypeFilter<>(CtClass.class))) {
            String className = ctClass.getQualifiedName();
            for (CtMethod<?> method : ctClass.getMethods()) {
                MethodModel methodModel = new MethodModel();
                methodModel.setClassName(className);
                methodModel.setMethodName(method.getSimpleName());

                // Parameters
                List<String> paramList = new ArrayList<>();
                method.getParameters().forEach(p -> paramList.add(p.getSimpleName()));
                methodModel.setParameters(paramList);

                // Method body
                if (method.getBody() != null)
                    methodModel.setMethodBody(method.getBody().toString());

                // Method calls
                List<String> called = new ArrayList<>();
                for (CtInvocation<?> invocation : method.getElements(new TypeFilter<>(CtInvocation.class))) {
                    called.add(invocation.getExecutable().getSignature());
                }
                methodModel.setCalledMethods(called);

                // Variable transformation
                List<TransformationStep> transformations = new ArrayList<>();
                for (CtAssignment<?, ?> assignment : method.getElements(new TypeFilter<>(CtAssignment.class))) {
                    String expression = assignment.toString();
                    transformations.add(new TransformationStep(expression));
                }
                methodModel.setTransformationSteps(transformations);

                // Code blocks like if/else/try/catch
                List<CodeStructureDetail> structures = new ArrayList<>();
                for (CtIf ctIf : method.getElements(new TypeFilter<>(CtIf.class))) {
                    structures.add(new CodeStructureDetail("if", ctIf.getCondition().toString()));
                }
                for (CtTry ctTry : method.getElements(new TypeFilter<>(CtTry.class))) {
                    structures.add(new CodeStructureDetail("try", ctTry.toString()));
                }
                methodModel.setCodeBlocks(structures);

                methodModels.add(methodModel);
            }
        }
        return methodModels;
    }
}
