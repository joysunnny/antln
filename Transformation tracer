package com.example.analyzer.tracer;

import com.example.analyzer.model.*;

import java.util.*;

public class TransformationTracer {

    private Map<String, MethodModel> methodMap;

    public TransformationTracer(Map<String, MethodModel> methodMap) {
        this.methodMap = methodMap;
    }

    public TracedParameter traceParameter(String className, String methodName, String parameterName) {
        String key = className + "#" + methodName;
        if (!methodMap.containsKey(key)) return null;

        MethodModel methodModel = methodMap.get(key);
        TracedParameter traced = new TracedParameter(parameterName);

        traceRecursive(methodModel, parameterName, traced, new HashSet<>());
        return traced;
    }

    private void traceRecursive(MethodModel methodModel, String paramName, TracedParameter traced, Set<String> visited) {
        if (methodModel == null || visited.contains(methodModel.getClassName() + "#" + methodModel.getMethodName()))
            return;

        visited.add(methodModel.getClassName() + "#" + methodModel.getMethodName());

        // Step 1: Check variable transformation
        for (VariableTransformation vt : methodModel.getParameterTransformations()) {
            if (vt.getOriginalParameter().equals(paramName)) {
                traced.addTransformation(vt);
                paramName = vt.getTransformedVariable();
            }
        }

        // Step 2: Check if this param is used in SQL
        for (SqlQueryDetail sql : methodModel.getSqlQueries()) {
            if (sql.getQuery().contains(paramName)) {
                traced.setFinalSql(sql);
            }
        }

        // Step 3: Recurse into called methods
        for (String called : methodModel.getCalledMethods()) {
            MethodModel calledModel = methodMap.get(called);
            if (calledModel != null) {
                traceRecursive(calledModel, paramName, traced, visited);
            }
        }

        // Step 4: Check for @Value usage
        for (ValueInjection vi : methodModel.getResolvedValues()) {
            if (vi.getFieldName().equals(paramName)) {
                traced.addResolvedValue(vi);
            }
        }
    }
}
